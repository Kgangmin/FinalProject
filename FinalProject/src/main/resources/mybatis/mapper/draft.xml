<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->

<mapper namespace="com.spring.app.draft.model.DraftDAO">
	
	<select id="getdraftList" parameterType="HashMap" resultType="com.spring.app.draft.domain.DraftDTO"> 
		
		select draft_no ,fk_draft_emp_no, draft_type , draft_title , draft_date ,  approval_status , is_attached
		from tbl_draft
		where fk_draft_emp_no = #{emp_no}
		<if test='!approval_status.equals("")'>
			AND APPROVAL_STATUS = #{approval_status}
		</if>
		<if test='!searchWord.equals("")'>
			AND LOWER(DRAFT_TITLE) LIKE '%' || LOWER(#{searchWord}) || '%' 
		</if>
		<if test='!draft_type.equals("")'>
			AND draft_type LIKE '%' || #{draft_type} || '%' 
		</if>
		
		ORDER BY DRAFT_DATE DESC
		OFFSET #{offset} ROW FETCH NEXT 7 ROWS ONLY
		
	</select>

	<select id="getdraftcount" parameterType="HashMap" resultType="Integer">
		
		select count(*)
		from tbl_draft
		where fk_draft_emp_no = #{emp_no}
		<if test='!approval_status.equals("")'>
			AND APPROVAL_STATUS = #{approval_status}
		</if>
		
		<if test='!searchWord.equals("")'>
			AND LOWER(DRAFT_TITLE) LIKE '%' || LOWER(#{searchWord}) || '%' 
		</if> 
		<if test='!draft_type.equals("")'>
			AND draft_type LIKE '%' || #{draft_type} || '%' 
		</if>
	</select> 
	
	<resultMap type="HashMap" id="draftdetail">
	 	<result property="draft_no" 		column="draft_no"  			javaType="String" />
        <result property="draft_type" 		column="draft_type"  		javaType="String" />
        <result property="draft_title" 		column="draft_title"  		javaType="String" />
		<result property="draft_date" 		column="draft_date"  		javaType="String" />
        <result property="approval_status" 	column="approval_status"  	javaType="String" />
        <result property="is_attached" 		column="is_attached"  		javaType="String" />
		<result property="emp_name" 		column="emp_name"  			javaType="String" />
        <result property="dept_name" 		column="dept_name"  		javaType="String" />
        <result property="phone_num" 		column="phone_num"  		javaType="String" />
	
	</resultMap>
	
	<select id="getdraftdetail" parameterType="String" resultMap="draftdetail">
		
		SELECT d.draft_no, d.draft_type, d.draft_title, d.draft_date, d.approval_status, d.is_attached , e.emp_name , de.dept_name ,e.phone_num
		FROM tbl_draft d join tbl_employee e on d.fk_draft_emp_no = e.emp_no join tbl_department de on e.fk_dept_no = de.dept_no
		WHERE draft_no = #{draft_no}
	
	</select>
	
	<select id="getexpenseList" parameterType="String" resultType="com.spring.app.draft.domain.ExpenseDTO">
	
		select *
		from tbl_expense_request
		where fk_draft_no = #{draft_no}
	</select>
	
	<resultMap type="HashMap" id="approval_line">
	 	<result property="approval_line_no" 		column="approval_line_no"  			javaType="String" />
        <result property="fk_draft_no" 				column="fk_draft_no"  				javaType="String" />
        <result property="fk_approval_emp_no" 		column="fk_approval_emp_no"  		javaType="String" />
		<result property="approval_order" 			column="approval_order"  			javaType="int" />
        <result property="approval_status" 			column="approval_status"  			javaType="String" />
        <result property="emp_name" 				column="emp_name"  					javaType="String" />
        <result property="approval_comment" 		column="approval_comment"  			javaType="String" />
        <result property="approval_result" 			column="approval_result" 			javaType="String" /> 
        <result property="approval_comment" 		column="approval_comment" 			javaType="String" /> 
        <result property="approval_at" 				column="approval_at" 				javaType="String" />   
	</resultMap>
	
	<select id="getapprovalLine" parameterType="String" resultMap="approval_line">
				SELECT
		      a.*,
		      e.emp_name,
		      ap.approval_result,
		      ap.approval_comment,
		      ap.approval_at
		  FROM tbl_approval_line a
		  JOIN tbl_employee e
		    ON e.emp_no = a.fk_approval_emp_no
		  LEFT JOIN (
		      SELECT fk_approval_line_no, approval_result, approval_comment, approval_at
		      FROM (
		          SELECT ap.*,
		                 ROW_NUMBER() OVER (
		                   PARTITION BY fk_approval_line_no
		                   ORDER BY approval_at DESC, approval_no DESC
		                 ) AS rn
		          FROM tbl_approval ap
		      )
		      WHERE rn = 1
		  ) ap
		    ON ap.fk_approval_line_no = a.approval_line_no
		  WHERE a.fk_draft_no = #{draft_no}
		  ORDER BY a.approval_order 
	</select>

	<resultMap type="HashMap" id="fileList">
	 	<result property="fk_draft_no" 				column="fk_draft_no"  			javaType="String" />
        <result property="draft_origin_filename" 	column="draft_origin_filename"  			javaType="String" />
        <result property="draft_save_filename" 		column="draft_save_filename"  javaType="String" />
		<result property="draft_filesize" 			column="draft_filesize"  		javaType="int" />
		<result property="draft_file_no" 			column="draft_file_no"  		javaType="String" />
	</resultMap>
	
	<select id="getfileList" parameterType="String" resultMap="fileList">
		
		select *
		from tbl_draft_file
		where fk_draft_no = #{draft_no}
	</select>
	
	<update id="draftupdate" parameterType="com.spring.app.draft.domain.DraftDTO">
		update tbl_draft set draft_title = #{draft_title} where draft_no = #{draft_no}
	</update>
	
	<select id="selectExpense_no" parameterType="String">
		select expense_no from tbl_expense_request where fk_draft_no = #{draft_no}
	</select>
	
	<update id="expenseUpdate" parameterType="com.spring.app.draft.domain.ExpenseDTO">
		update tbl_expense_request set payee_name = #{payee_name},
									   payee_type = #{payee_type},
									   payee_account = #{payee_account},
									   payee_bank = #{payee_bank},
									   expense_type = #{expense_type},
									   expense_amount = #{expense_amount},
									   expense_date = TO_DATE(#{expense_date}, 'YYYY-MM-DD'),
									   expense_desc = #{expense_desc}
		 WHERE expense_no = #{expense_no}
	</update>
	
	<insert id="expenseInsert" parameterType="com.spring.app.draft.domain.ExpenseDTO">
		  INSERT INTO tbl_expense_request(	expense_no, fk_draft_no, payee_name, payee_type, payee_account, payee_bank,
										    expense_type, expense_amount, expense_date, expense_desc
										  ) VALUES (
										    seq_tbl_expense_request.NEXTVAL,           
										    #{fk_draft_no}, #{payee_name}, #{payee_type}, #{payee_account}, #{payee_bank},
										    #{expense_type}, #{expense_amount}, TO_DATE(#{expense_date}, 'YYYY-MM-DD'), #{expense_desc}
										  )	
	</insert>
	
	<delete id="expenseDelete" >
	  DELETE FROM tbl_expense_request
	  WHERE expense_no IN
	  <foreach collection="list" item="id" open="(" separator="," close=")">
	    #{id}
	  </foreach>
	
	</delete>
	
	<insert id="insertfile" parameterType="HashMap">
		insert into tbl_draft_file values (seq_tbl_draft_file.nextval,#{draft_no} , #{origin} , #{saveName} , #{size}) 
	
	</insert>
	
	<resultMap type="HashMap" id="file">
	 	<result property="fk_draft_no" 				column="fk_draft_no"  			javaType="String" />
        <result property="draft_origin_filename" 	column="draft_origin_filename"  			javaType="String" />
        <result property="draft_save_filename" 		column="draft_save_filename"  javaType="String" />
		<result property="draft_filesize" 			column="draft_filesize"  		javaType="int" />
		<result property="draft_file_no" 			column="draft_file_no"  		javaType="String" />
	</resultMap>
	
	<select id="getfileOne" parameterType="String" resultMap="file">
		select * from tbl_draft_file where draft_file_no = #{draft_file_no} 
	
	</select>
	
	<select id="getdel_fileList" resultType="string">
	  	SELECT draft_save_filename
	    FROM tbl_draft_file
	   	WHERE fk_draft_no = #{draft_no}
	    AND draft_file_no IN
		<foreach collection="list" item="id" open="(" separator="," close=")">
		       #{id}
		</foreach>
	</select>
	
	<delete id="file_delete" >
	  	 DELETE FROM tbl_draft_file
	  	 WHERE fk_draft_no = #{draft_no}
	     AND draft_file_no IN
	     <foreach collection="list" item="id" open="(" separator="," close=")">
	       #{id}
	     </foreach>
	</delete>
	
	<update id="updateattch_N" parameterType="String">
		update tbl_draft set is_attached = 'N'
		where draft_no = #{draft_no}
	</update>
	
	<update id="updateattch_Y" parameterType="String">
		update tbl_draft set is_attached = 'Y'
		where draft_no = #{draft_no}
	</update>
	
	<select id="getLeave" parameterType="String" resultType="com.spring.app.draft.domain.LeaveDTO">
		select *
		from tbl_leave_request 
		where fk_draft_no = #{draft_no}
	</select>
	
	<resultMap type="HashMap" id="leave_type">
	 	<result property="leave_type_no" 		column="leave_type_no"  	javaType="String" />
        <result property="leave_type_name" 		column="leave_type_name"  	javaType="String" />
        <result property="is_paid" 				column="is_paid"  			javaType="String" />
		<result property="default_days" 		column="default_days"  		javaType="int" />
	</resultMap>
	
	<select id="getleaveType" resultMap="leave_type">
		select *
		from tbl_leave_type
	</select>
	
	<update id="leaveUpdate" parameterType="com.spring.app.draft.domain.LeaveDTO">
		update tbl_leave_request set fk_leave_type_no = #{fk_leave_type_no}
									,start_date = #{start_date}
									,end_date = #{end_date}
									,leave_days = #{leave_days}
									,leave_remark = #{leave_remark} 
		where fk_draft_no = #{fk_draft_no}						
	</update> 
	
	<select id="getproposal" parameterType="String" resultType="com.spring.app.draft.domain.ProposalDTO">
		select * from tbl_proposal where fk_draft_no = #{draft_no}
	</select>
	
	<update id="proposalUpdate" parameterType="com.spring.app.draft.domain.ProposalDTO">
		update tbl_proposal set BACKGROUND = #{background}
							   ,PROPOSAL_CONTENT = #{proposal_content}
							   ,EXPECTED_EFFECT = #{expected_effect}
		where FK_DRAFT_NO  = #{fk_draft_no}
	 
	</update>
	
	<resultMap id="EmployeeMap" type="HashMap">
	    <result column="emp_no"    property="emp_no"/>
	    <result column="emp_name"  property="emp_name"/>
	    <result column="dept_name" property="dept_name"/>
	    <result column="rank_name" property="rank_name"/>
  	</resultMap>
  	
	<select id="quickSearch" parameterType="String" resultMap="EmployeeMap">
		SELECT  e.emp_no,
		      	e.emp_name,
		      	d.dept_name,
		      	r.rank_name
		FROM tbl_employee e
		JOIN tbl_department d ON d.dept_no = e.fk_dept_no 
		join tbl_rank r on r.rank_no = e.fk_rank_no
		WHERE LOWER(e.emp_name)  LIKE #{pattern}
		      OR LOWER(d.dept_name) LIKE #{pattern}
		      OR LOWER(r.rank_name) LIKE #{pattern}
		ORDER BY e.fk_dept_no ASC 
	</select>
	
	<insert id="insertdraft" parameterType="com.spring.app.draft.domain.DraftDTO">
	  <selectKey keyProperty="draft_no" resultType="string" order="BEFORE">
	    SELECT seq_tbl_draft.NEXTVAL FROM dual
	  </selectKey>
	
	  INSERT INTO TBL_DRAFT (
	    DRAFT_NO, FK_DRAFT_EMP_NO, DRAFT_TYPE, DRAFT_TITLE, DRAFT_DATE, APPROVAL_STATUS, IS_ATTACHED
	  ) VALUES (
	    #{draft_no},
	    #{fk_draft_emp_no},
	    #{draft_type},
	    #{draft_title},
	    SYSDATE,
	    DEFAULT,
	    'N'
	  )
	</insert>
	<insert id="insertProposal" parameterType="com.spring.app.draft.domain.ProposalDTO">
		 insert into tbl_proposal values ( #{fk_draft_no} , #{background} , #{proposal_content} , #{expected_effect} )
	</insert>
	
	<insert id="insertApprovalLine" parameterType="com.spring.app.draft.domain.ApprovalLineDTO">
	  INSERT INTO TBL_APPROVAL_LINE (
	    APPROVAL_LINE_NO,
	    FK_DRAFT_NO,
	    FK_APPROVAL_EMP_NO,
	    APPROVAL_ORDER,
	    APPROVAL_STATUS
	  ) VALUES (
	    seq_tbl_approval_line.NEXTVAL,
	    #{fk_draft_no},
	    #{fk_approval_emp_no},
	    #{approval_order},
	    DEFAULT
	  )
	</insert>
	
	<insert id="insertLeave" parameterType="com.spring.app.draft.domain.LeaveDTO">
		insert into tbl_leave_request values (#{fk_draft_no} , #{fk_leave_type_no} , #{start_date} , #{end_date}, #{leave_days} , #{leave_remark})
	</insert>
	
	
	<select id="getapproveList" parameterType="HashMap"
		        resultType="com.spring.app.draft.domain.DraftDTO">
				WITH PENDING AS (
				  SELECT al.fk_draft_no, MIN(al.approval_order) AS min_pending_order
				  FROM   tbl_approval_line al
				  WHERE  al.approval_status = '대기'      -- ← NULL 제거
				  GROUP  BY al.fk_draft_no
				),
				MY_LINE AS (
				  SELECT al.approval_line_no, al.fk_draft_no, al.fk_approval_emp_no,
				         al.approval_status, al.approval_order
				  FROM   tbl_approval_line al
				  WHERE  al.fk_approval_emp_no = #{emp_no}
				)
				SELECT
				  d.draft_no, d.fk_draft_emp_no, d.draft_type, d.draft_title,
				  d.draft_date, d.approval_status, d.is_attached,
				  CASE
				    WHEN ml.approval_status IN ('승인','반려') THEN 'DONE'
				    WHEN d.approval_status NOT IN ('승인','반려')
				         AND ml.approval_status = '대기'
				         AND ml.approval_order = p.min_pending_order
				      THEN 'MY_TURN'
				  END AS approvalViewType
				FROM   MY_LINE ml
				JOIN   tbl_draft d ON d.draft_no = ml.fk_draft_no
				LEFT JOIN PENDING p ON p.fk_draft_no = d.draft_no
				WHERE
				  (
				    ml.approval_status IN ('승인','반려') -- DONE
				    OR (
				         d.approval_status NOT IN ('승인','반려')
				         AND ml.approval_status = '대기'
				         AND ml.approval_order = p.min_pending_order
				       )                                 -- MY_TURN
				  )
				<if test="draft_type != null and draft_type != ''">
				  AND d.draft_type = #{draft_type}
				</if>
				<if test="approval_status != null and approval_status != ''">
				  AND d.approval_status = #{approval_status}
				</if>
				<if test="searchWord != null and searchWord != ''">
				  AND LOWER(d.draft_title) LIKE '%' || LOWER(#{searchWord}) || '%'
				</if>
				ORDER BY d.draft_date DESC, d.draft_no DESC
				OFFSET #{offset} ROWS FETCH NEXT 7 ROWS ONLY
	</select>
		
			
	<select id="getapprovecount" parameterType="HashMap" resultType="int">
			WITH PENDING AS (
		  SELECT al.fk_draft_no, MIN(al.approval_order) AS min_pending_order
		  FROM   tbl_approval_line al
		  WHERE  al.approval_status = '대기'     -- ← NULL 제거
		  GROUP  BY al.fk_draft_no
		),
		MY_LINE AS (
		  SELECT al.approval_line_no, al.fk_draft_no, al.fk_approval_emp_no,
		         al.approval_status, al.approval_order
		  FROM   tbl_approval_line al
		  WHERE  al.fk_approval_emp_no = #{emp_no}
		)
		SELECT COUNT(DISTINCT d.draft_no)
		FROM   MY_LINE ml
		JOIN   tbl_draft d ON d.draft_no = ml.fk_draft_no
		LEFT JOIN PENDING p ON p.fk_draft_no = d.draft_no
		WHERE
		  (
		    ml.approval_status IN ('승인','반려')
		    OR (
		         d.approval_status NOT IN ('승인','반려')
		         AND ml.approval_status = '대기'
		         AND ml.approval_order = p.min_pending_order
		       )
		  )
		<if test="draft_type != null and draft_type != ''">
		  AND d.draft_type = #{draft_type}
		</if>
		<if test="approval_status != null and approval_status != ''">
		  AND d.approval_status = #{approval_status}
		</if>
		<if test="searchWord != null and searchWord != ''">
		  AND LOWER(d.draft_title) LIKE '%' || LOWER(#{searchWord}) || '%'
		</if>
	</select>

	
	<select id="getNextOrder" parameterType="String">
		  SELECT NVL(MIN(al.approval_order), 0)
		  FROM tbl_approval_line al
		  WHERE al.fk_draft_no = #{draft_no}
		    AND al.approval_status = '대기'
	</select>
	
	<update id="approveLineUpdate" parameterType="HashMap">
		update tbl_approval_line set approval_status = #{approval_status}
		where fk_draft_no = #{draft_no} and fk_approval_emp_no = #{approver_emp_no}
		
	</update>
	
	<insert id="approveInsert" parameterType="HashMap">
		insert into tbl_approval values 
		(seq_tbl_approval.nextval , #{approval_line_no} ,#{approval_status} , #{approval_comment} , default)
	</insert>
	
	<select id="countLine" parameterType="HashMap">
		select count(*)
		from tbl_approval_line 
		where fk_draft_no = #{draft_no}
	</select>
	
	<select id="countApprove" parameterType="HashMap">
		select count(*)
		from tbl_approval_line
		where fk_draft_no =#{draft_no} and approval_status = '승인'
	</select>
	
	<update id="draftStatusUpdate" parameterType="HashMap">
		update tbl_draft set approval_status = #{approval_status}
		where draft_no = #{draft_no} 
	</update>
	
	<select id="getapproveReject" parameterType="HashMap">
		select min(approval_order)
		from tbl_approval_line 
		where fk_draft_no = #{draft_no}
			  and approval_status = '반려'
	</select>
	
	<update id="approveReset" parameterType="HashMap">
		 UPDATE tbl_approval_line
	     SET approval_status =
	         CASE
	           WHEN approval_order = #{cntReject} THEN '대기'     
	           ELSE approval_status                             
	         END
  		 WHERE fk_draft_no = #{draft_no}
	</update>
	
</mapper>	
