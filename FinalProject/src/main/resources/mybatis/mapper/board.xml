<!-- src/main/resources/mybatis/mapper/board.xml -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.app.board.model.BoardDAO">

  <!-- ========= 카테고리 ========= -->
  <select id="selectCategoryByNo" parameterType="string" resultType="com.spring.app.board.domain.CategoryDTO">
    SELECT board_category_no, board_category_name, is_comment_enabled, is_read_enabled
    FROM tbl_board_category
    WHERE board_category_no = #{no}
  </select>

  <select id="selectCategoryByName" parameterType="string" resultType="com.spring.app.board.domain.CategoryDTO">
    SELECT board_category_no, board_category_name, is_comment_enabled, is_read_enabled
    FROM tbl_board_category
    WHERE board_category_name = #{name}
  </select>

    <select id="selectAllCategories" resultType="com.spring.app.board.domain.CategoryDTO">
    SELECT board_category_no, board_category_name, is_comment_enabled, is_read_enabled
    FROM tbl_board_category
    ORDER BY 
      CASE 
        WHEN REGEXP_LIKE(board_category_no, '^\d+$') 
          THEN TO_NUMBER(board_category_no) 
      END NULLS LAST,
      board_category_no
  </select>


<select id="selectComments" parameterType="string" resultType="com.spring.app.board.domain.CommentDTO">
  SELECT
    c.comment_no,
    c.fk_board_no,
    c.fk_emp_no,
    c.comment_content,
    TO_CHAR(c.register_date,'YYYY-MM-DD HH24:MI') AS register_date,
    e.emp_name AS writer_name
  FROM tbl_comment c
  JOIN tbl_employee e ON e.emp_no = c.fk_emp_no
  WHERE c.fk_board_no = #{boardNo}
  ORDER BY c.register_date ASC
</select>


  <!-- ========= 권한 ========= -->
  <!-- READ: DEPT/EMP 매칭 + READ/WRITE/ADMIN 허용 -->
  <select id="existsReadPermission" parameterType="map" resultType="int">
    SELECT COUNT(*)
      FROM tbl_board_permission
     WHERE fk_board_category_no = #{catNo}
       AND (
            (target_type = 'DEPT' AND TRIM(target_no) = TRIM(#{deptNo}))
         OR (target_type = 'EMP'  AND TRIM(target_no) = TRIM(#{empNo}))
       )
       AND permission_type IN ('READ','WRITE','ADMIN')
  </select>

  <!-- WRITE: DEPT/EMP 매칭 + WRITE/ADMIN 허용 -->
  <select id="existsWritePermission" parameterType="map" resultType="int">
    SELECT COUNT(*)
      FROM tbl_board_permission
     WHERE fk_board_category_no = #{catNo}
       AND (
            (target_type = 'DEPT' AND TRIM(target_no) = TRIM(#{deptNo}))
         OR (target_type = 'EMP'  AND TRIM(target_no) = TRIM(#{empNo}))
       )
       AND permission_type IN ('WRITE','ADMIN')
  </select>

  <!-- ========= 목록/상세 ========= -->
  <select id="countBoardList" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM tbl_board b JOIN tbl_employee e ON e.emp_no = b.fk_emp_no
    WHERE b.deleted_date IS NULL
      AND b.fk_board_category_no = #{fk_board_category_no}
      <if test="searchType != null and searchType != '' and searchKeyword != null and searchKeyword != ''">
        <choose>
          <when test="searchType == 'title'">
            AND b.board_title LIKE '%'||#{searchKeyword}||'%'
          </when>
          <when test="searchType == 'writer'">
            AND e.emp_name LIKE '%'||#{searchKeyword}||'%'
          </when>
        </choose>
      </if>
  </select>

  <select id="selectBoardList" parameterType="map" resultType="com.spring.app.board.domain.BoardDTO">
    SELECT * FROM (
      SELECT ROWNUM rnum, x.*
        FROM (
          SELECT
             b.board_no, b.fk_board_category_no, b.fk_emp_no,
             b.board_title, b.board_content, b.is_pinned,
             TO_CHAR(b.view_cnt) AS view_cnt,
             TO_CHAR(b.register_date,'YYYY-MM-DD HH24:MI') AS register_date,
             TO_CHAR(b.update_date,'YYYY-MM-DD HH24:MI') AS update_date,
             TO_CHAR(b.deleted_date,'YYYY-MM-DD HH24:MI') AS deleted_date,
             b.parent_board_no, TO_CHAR(b.board_priority) AS board_priority,
             b.is_attached,
             
             TO_CHAR( (SELECT COUNT(*) FROM tbl_comment c WHERE c.fk_board_no = b.board_no) ) AS comment_cnt,
             
             e.emp_name AS writer_name
          FROM tbl_board b
          JOIN tbl_employee e ON e.emp_no = b.fk_emp_no
          WHERE b.deleted_date IS NULL
            AND b.fk_board_category_no = #{fk_board_category_no}
            <if test="searchType != null and searchType != '' and searchKeyword != null and searchKeyword != ''">
              <choose>
                <when test="searchType == 'title'">
                  AND b.board_title LIKE '%'||#{searchKeyword}||'%'
                </when>
                <when test="searchType == 'writer'">
                  AND e.emp_name    LIKE '%'||#{searchKeyword}||'%'
                </when>
              </choose>
            </if>
          <choose>
            <when test="sort == 'views'">
              ORDER BY b.is_pinned DESC, b.board_priority DESC NULLS LAST, b.view_cnt DESC, b.register_date DESC
            </when>
            <otherwise>
              ORDER BY b.is_pinned DESC, b.board_priority DESC NULLS LAST, b.register_date DESC
            </otherwise>
          </choose>
        ) x
      WHERE ROWNUM &lt;= #{endRow}
    )
    WHERE rnum &gt;= #{startRow}
  </select>

  <select id="selectBoardByNo" parameterType="string" resultType="com.spring.app.board.domain.BoardDTO">
    SELECT b.board_no, b.fk_board_category_no, b.fk_emp_no,
           b.board_title, b.board_content, b.is_pinned,
           TO_CHAR(b.view_cnt) AS view_cnt,
           TO_CHAR(b.register_date,'YYYY-MM-DD HH24:MI') AS register_date,
           TO_CHAR(b.update_date,'YYYY-MM-DD HH24:MI')   AS update_date,
           TO_CHAR(b.deleted_date,'YYYY-MM-DD HH24:MI')  AS deleted_date,
           b.parent_board_no, TO_CHAR(b.board_priority)  AS board_priority,
           b.is_attached
    FROM tbl_board b
    WHERE b.board_no = #{boardNo}
  </select>

  <update id="increaseViewCnt" parameterType="string">
    UPDATE tbl_board SET view_cnt = view_cnt + 1 WHERE board_no = #{boardNo}
  </update>

  <insert id="insertReadIfAbsent" parameterType="map">
  MERGE INTO tbl_board_read r
  USING (SELECT #{boardNo} AS fk_board_no, #{empNo} AS fk_emp_no FROM dual) s
     ON (r.fk_board_no = s.fk_board_no AND r.fk_emp_no = s.fk_emp_no)
  WHEN NOT MATCHED THEN
    INSERT (fk_board_no, fk_emp_no)
    VALUES (s.fk_board_no, s.fk_emp_no)
</insert>

  <!-- 중복 방지 + 정렬 -->
<select id="selectReaders" parameterType="string" resultType="map">
  SELECT DISTINCT
         r.fk_emp_no AS emp_no,
         e.emp_name  AS emp_name
  FROM tbl_board_read r
  JOIN tbl_employee e ON e.emp_no = r.fk_emp_no
  WHERE r.fk_board_no = #{boardNo}
  ORDER BY e.emp_name
</select>



  <select id="countReaders" parameterType="string" resultType="int">
    SELECT COUNT(*) FROM tbl_board_read WHERE fk_board_no = #{boardNo}
  </select>

  <select id="selectPrevBoard" parameterType="map" resultType="com.spring.app.board.domain.BoardDTO">
    SELECT board_no, board_title
    FROM (
      SELECT b.board_no, b.board_title, b.register_date
      FROM tbl_board b
      WHERE b.deleted_date IS NULL
        AND b.fk_board_category_no = #{catNo}
        AND b.register_date &lt; (SELECT register_date FROM tbl_board WHERE board_no = #{boardNo})
      ORDER BY b.register_date DESC
    ) WHERE ROWNUM = 1
  </select>

  <select id="selectNextBoard" parameterType="map" resultType="com.spring.app.board.domain.BoardDTO">
    SELECT board_no, board_title
    FROM (
      SELECT b.board_no, b.board_title, b.register_date
      FROM tbl_board b
      WHERE b.deleted_date IS NULL
        AND b.fk_board_category_no = #{catNo}
        AND b.register_date &gt; (SELECT register_date FROM tbl_board WHERE board_no = #{boardNo})
      ORDER BY b.register_date ASC
    ) WHERE ROWNUM = 1
  </select>

  <!-- ========= 글/파일/댓글 ========= -->
  <insert id="insertBoard" parameterType="com.spring.app.board.domain.BoardDTO">
  <selectKey keyProperty="board_no" resultType="string" order="BEFORE">
    SELECT LPAD(SEQ_TBL_BOARD.NEXTVAL, 10, '0') FROM dual
  </selectKey>

  INSERT INTO tbl_board (
    board_no, fk_board_category_no, fk_emp_no,
    board_title, board_content,
    is_pinned, view_cnt, register_date, is_attached, parent_board_no, board_priority
  ) VALUES (
    #{board_no}, #{fk_board_category_no}, #{fk_emp_no},
    #{board_title}, #{board_content},
    NVL(#{is_pinned}, 'N'), 0, SYSDATE, NVL(#{is_attached}, 'N'),
    #{parent_board_no, jdbcType=VARCHAR},
    CASE WHEN #{is_pinned} = 'Y'
         THEN TO_NUMBER(NULLIF(#{board_priority, jdbcType=VARCHAR}, ''))
         ELSE NULL
    END
  )
</insert>


  <insert id="insertBoardFile" parameterType="com.spring.app.board.domain.BoardFileDTO">
    <selectKey keyProperty="board_file_no" resultType="string" order="BEFORE">
      SELECT LPAD(SEQ_TBL_BOARD_FILE.NEXTVAL, 10, '0') FROM dual
    </selectKey>
    INSERT INTO tbl_board_file (
      board_file_no, fk_board_no, board_origin_filename, board_save_filename, board_filesize
    ) VALUES (
      #{board_file_no}, #{fk_board_no}, #{board_origin_filename}, #{board_save_filename}, TO_NUMBER(#{board_filesize})
    )
  </insert>

  <insert id="insertComment" parameterType="com.spring.app.board.domain.CommentDTO">
    INSERT INTO tbl_comment (
      comment_no, fk_board_no, fk_emp_no, comment_content, register_date
    ) VALUES (
      LPAD(SEQ_TBL_COMMENT.NEXTVAL, 10, '0'), #{fk_board_no}, #{fk_emp_no}, #{comment_content}, SYSDATE
    )
  </insert>
  
  <!-- 첨부파일 목록(글별) -->
<select id="selectFilesByBoardNo" parameterType="string"
        resultType="com.spring.app.board.domain.BoardFileDTO">
  SELECT
    board_file_no,
    fk_board_no,
    board_origin_filename,
    board_save_filename,
    TO_CHAR(board_filesize) AS board_filesize
  FROM tbl_board_file
  WHERE fk_board_no = #{boardNo}
  ORDER BY board_file_no
</select>

<!-- 첨부파일 단건(다운로드용) -->
<select id="selectFileByNo" parameterType="string"
        resultType="com.spring.app.board.domain.BoardFileDTO">
  SELECT
    board_file_no,
    fk_board_no,
    board_origin_filename,
    board_save_filename,
    TO_CHAR(board_filesize) AS board_filesize
  FROM tbl_board_file
  WHERE board_file_no = #{fileNo}
</select>
  
   <!-- 내 부서가 WRITE/ADMIN 권한 가진 첫 카테고리 -->
  <select id="selectFirstWritableCategoryByDept"
          parameterType="string"
          resultType="com.spring.app.board.domain.CategoryDTO">
    SELECT *
    FROM (
      SELECT c.board_category_no,
             c.board_category_name,
             c.is_comment_enabled,
             c.is_read_enabled
      FROM tbl_board_category c
      JOIN tbl_board_permission p
        ON p.fk_board_category_no = c.board_category_no
       AND p.target_type = 'DEPT'
       AND TRIM(p.target_no) = TRIM(#{deptNo})
       AND p.permission_type IN ('WRITE','ADMIN')
      ORDER BY c.board_category_name
    )
    WHERE ROWNUM = 1
  </select>
  

  <!-- ========= 관리자 ========= -->
  <select id="nextCategoryNo" resultType="string">
    SELECT LPAD(SEQ_TBL_BOARD_CATEGORY.NEXTVAL, 10, '0') FROM dual
  </select>

  <insert id="insertCategory" parameterType="com.spring.app.board.domain.CategoryDTO">
    INSERT INTO tbl_board_category (board_category_no, board_category_name, is_comment_enabled, is_read_enabled)
    VALUES (#{board_category_no}, #{board_category_name}, #{is_comment_enabled}, #{is_read_enabled})
  </insert>

  <insert id="insertPermission" parameterType="map">
    INSERT INTO tbl_board_permission (fk_board_category_no, target_type, target_no, permission_type)
    VALUES (#{catNo}, #{targetType}, #{targetNo}, #{perm})
  </insert>

<!-- 파일 저장명 목록 (물리 파일 삭제 전에 가져옴) -->
<select id="selectSaveFilenamesByCat" parameterType="string" resultType="string">
  SELECT bf.board_save_filename
  FROM tbl_board_file bf
  JOIN tbl_board b ON b.board_no = bf.fk_board_no
  WHERE b.fk_board_category_no = #{catNo}
</select>

<!-- 자식 → 부모 순서로 삭제 -->
<delete id="deleteBoardReadByCat" parameterType="string">
  DELETE FROM tbl_board_read
  WHERE fk_board_no IN (
    SELECT board_no FROM tbl_board WHERE fk_board_category_no = #{catNo}
  )
</delete>

<delete id="deleteBoardFileByCat" parameterType="string">
  DELETE FROM tbl_board_file
  WHERE fk_board_no IN (
    SELECT board_no FROM tbl_board WHERE fk_board_category_no = #{catNo}
  )
</delete>

<delete id="deleteCommentByCat" parameterType="string">
  DELETE FROM tbl_comment
  WHERE fk_board_no IN (
    SELECT board_no FROM tbl_board WHERE fk_board_category_no = #{catNo}
  )
</delete>

<delete id="deleteBoardByCat" parameterType="string">
  DELETE FROM tbl_board
  WHERE fk_board_category_no = #{catNo}
</delete>

<delete id="deletePermissionByCat" parameterType="string">
  DELETE FROM tbl_board_permission
  WHERE fk_board_category_no = #{catNo}
</delete>

<delete id="deleteCategory" parameterType="string">
  DELETE FROM tbl_board_category
  WHERE board_category_no = #{catNo}
</delete>


<!-- 파일 저장명 목록 (단일 게시글 삭제용) -->
<select id="selectSaveFilenamesByBoard" parameterType="string" resultType="string">
  SELECT bf.board_save_filename
  FROM tbl_board_file bf
  WHERE bf.fk_board_no = #{boardNo}
</select>

<!-- 자식 → 부모 순서로 단일 게시글 삭제 -->
<delete id="deleteBoardReadByBoard" parameterType="string">
  DELETE FROM tbl_board_read WHERE fk_board_no = #{boardNo}
</delete>

<delete id="deleteBoardFileByBoard" parameterType="string">
  DELETE FROM tbl_board_file WHERE fk_board_no = #{boardNo}
</delete>

<delete id="deleteCommentByBoard" parameterType="string">
  DELETE FROM tbl_comment WHERE fk_board_no = #{boardNo}
</delete>

<delete id="deleteBoard" parameterType="string">
  DELETE FROM tbl_board WHERE board_no = #{boardNo}
</delete>


<!-- board.xml (추가) -->
<select id="selectCommentByNo" parameterType="string" resultType="com.spring.app.board.domain.CommentDTO">
  SELECT
    c.comment_no,
    c.fk_board_no,
    c.fk_emp_no,
    c.comment_content,
    TO_CHAR(c.register_date,'YYYY-MM-DD HH24:MI') AS register_date
  FROM tbl_comment c
  WHERE c.comment_no = #{commentNo}
</select>

<delete id="deleteCommentByNo" parameterType="string">
  DELETE FROM tbl_comment
  WHERE comment_no = #{commentNo}
</delete>

<select id="selectVisibleCategories" resultType="com.spring.app.board.domain.CategoryDTO">
  SELECT DISTINCT
         c.board_category_no,
         c.board_category_name,
         c.is_comment_enabled,
         c.is_read_enabled
  FROM tbl_board_category c
  LEFT JOIN tbl_board_permission p
         ON p.fk_board_category_no = c.board_category_no
        AND p.permission_type IN ('READ','WRITE','ADMIN')
        AND (
              (p.target_type = 'DEPT' AND #{deptNo} IS NOT NULL AND p.target_no = #{deptNo})
           OR (p.target_type = 'EMP'  AND #{empNo}  IS NOT NULL AND p.target_no = #{empNo})
        )
  WHERE c.board_category_name IN ('전사공지','전사알림','자유게시판')
     OR p.fk_board_category_no IS NOT NULL
  ORDER BY c.board_category_name
</select>





</mapper>
