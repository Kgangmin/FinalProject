<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.app.emp.model.EmpDAO">

	<!-- 컬럼명 == DTO 프로퍼티명(소문자)로 매핑 -->
	<resultMap id="EmpMap" type="EmpDTO">
		<id     property="emp_no"               column="EMP_NO"/>
		<result property="emp_pwd"              column="EMP_PWD"/>
		<result property="emp_name"             column="EMP_NAME"/>
		<result property="fk_rank_no"           column="FK_RANK_NO"/>
		<result property="rank_name"			column="RANK_NAME"/>
		<result property="fk_dept_no"           column="FK_DEPT_NO"/>
		<result property="team_name"			column="TEAM_NAME"/>
		<result property="dept_name"			column="DEPT_NAME"/>
		<result property="ex_email"             column="EX_EMAIL"/>
		<result property="emp_email"            column="EMP_EMAIL"/>
		<result property="phone_num"            column="PHONE_NUM"/>
		<result property="rr_number"			column="RR_NUMBER"/>
		<result property="emp_account"          column="EMP_ACCOUNT"/>
		<result property="emp_bank"             column="EMP_BANK"/>
		<result property="hiredate"             column="HIREDATE"/>
		<result property="resigndate"           column="RESIGNDATE"/>
		<result property="emp_status"           column="EMP_STATUS"/>
		<result property="emp_origin_filename"  column="EMP_ORIGIN_FILENAME"/>
		<result property="emp_save_filename"    column="EMP_SAVE_FILENAME"/>
		<result property="emp_filesize"         column="EMP_FILESIZE"/>
		<result property="postcode"				column="POSTCODE"/>
		<result property="address"				column="ADDRESS"/>
		<result property="detail_address"		column="DETAIL_ADDRESS"/>
		<result property="extra_address"		column="EXTRA_ADDRESS"/>
		
	</resultMap>

	<!-- 로그인용 단건 조회
		 DATE/NUMBER를 String으로 받으므로 TO_CHAR로 포맷 통일(원하면 유지 가능) -->
	<select id="selectEmpByEmpNo" parameterType="string" resultMap="EmpMap">
		SELECT
			EMP_NO,
			EMP_PWD,
			EMP_NAME,
			FK_DEPT_NO,
			EX_EMAIL,
			EMP_EMAIL,
			EMP_STATUS
			FROM TBL_EMPLOYEE
			WHERE EMP_NO = #{empNo}
	</select>
  
	<select id="selectEmpInfoByEmpNo" parameterType="string" resultMap="EmpMap">
    select 
        e.emp_no, e.emp_pwd, e.emp_name,
        e.fk_rank_no, r.rank_name,
        e.fk_dept_no, d.dept_name as team_name, d_p.dept_name as dept_name,
        e.ex_email, e.emp_email, e.phone_num,
        e.rr_number,
        e.emp_account, e.emp_bank,
        to_char(e.hiredate,'yyyy-mm-dd') as hiredate,
        to_char(e.resigndate,'yyyy-mm-dd') as resigndate,
        e.emp_status, e.emp_origin_filename,
        e.emp_save_filename, to_char(e.emp_filesize) as emp_filesize,
        e.postcode, e.address, e.detail_address, e.extra_address
    from tbl_employee e
    left join tbl_department d on e.fk_dept_no = d.dept_no
    left join tbl_department d_p on d.parent_dept_no = d_p.dept_no
    left join tbl_rank r on e.fk_rank_no = r.rank_no
    where e.emp_no = #{emp_no}
	</select>
	
	<select id="getEmpProfileFileName" parameterType="String" resultType="String">
		select		emp_save_filename
		from		tbl_employee
		where		emp_no = #{emp_no}
	</select>
	
	<select id="getEmpProfileFileInfo" parameterType="String" resultType="EmpDTO">
		select		emp_save_filename, emp_origin_filename, to_char(emp_filesize) as emp_filesize
		from		tbl_employee
		where		emp_no = #{emp_no}
	</select>
	
	<update id="updateEmpInfo" parameterType="EmpDTO">
		update		tbl_employee
		<set>
			<if test="ex_email != null">		ex_email = #{ex_email},</if>
			<if test="emp_email != null">		emp_email = #{emp_email},</if>
			<if test="phone_num != null">		phone_num = #{phone_num},</if>
			<if test="emp_account != null">		emp_account = #{emp_account},</if>
			<if test="emp_bank != null">		emp_bank = #{emp_bank},</if>
			<if test="postcode != null">		postcode = #{postcode},</if>
			<if test="address != null">			address = #{address},</if>
			<if test="detail_address != null">	detail_address = #{detail_address},</if>
			<if test="extra_address != null">	extra_address = #{extra_address},</if>
		</set>
		where		emp_no = #{emp_no}
	</update>
	
	<update id="updateEmpInfoWithFile" parameterType="EmpDTO">
		update		tbl_employee
		<set>
			<!-- 파일 관련 필드는 호출시 항상 업데이트 -->
			emp_origin_filename	= #{emp_origin_filename},
			emp_save_filename	= #{emp_save_filename},
			emp_filesize		= #{emp_filesize},
			<!-- 나머지 필드는 변경수요 발생할 때만 -->
			<if test="ex_email != null">		ex_email = #{ex_email},</if>
			<if test="emp_email != null">		emp_email = #{emp_email},</if>
			<if test="phone_num != null">		phone_num = #{phone_num},</if>
			<if test="emp_account != null">		emp_account = #{emp_account},</if>
			<if test="emp_bank != null">		emp_bank = #{emp_bank},</if>
			<if test="postcode != null">		postcode = #{postcode},</if>
			<if test="address != null">			address = #{address},</if>
			<if test="detail_address != null">	detail_address = #{detail_address},</if>
			<if test="extra_address != null">	extra_address = #{extra_address},</if>
		</set>
		where		emp_no = #{emp_no}
	</update>


	<!--#####################################################-->
	
	<select id="findByEmpNo" resultType="EmpDTO">
		select	emp_no, emp_pwd, emp_name, emp_status
		from	tbl_employee
		where	emp_no = #{emp_no}
	</select>
	
	<select id="findPermissionByEmpNo" resultType="String">
		select	P.permission_code
		from	tbl_permission P
		join	tbl_position_permission PP on P.permission_code = PP.fk_permission_code
		join	tbl_employee_position EP on PP.fk_position_no = EP.fk_position_no
		where	EP.fk_emp_no = #{emp_no}
	</select>
	
	<select id="selectPasswordHashByEmpNo" parameterType="string" resultType="string">
		select	emp_pwd
		from	tbl_employee
		where	emp_no = #{empNo}
	</select>

	<update id="updatePasswordByEmpNo">
		update	tbl_employee
		set		emp_pwd = #{param2}
		where	emp_no  = #{param1}
	</update>
	
	<select id="getEmpList" parameterType="map" resultType="com.spring.app.emp.domain.EmpDTO">
    select * from (
        select a.*, rownum rn from (
            select e.emp_no, e.emp_name, r.rank_name, e.emp_email,
                   nvl(parent_dept.dept_name, dept.dept_name) as dept_name,
                   dept.dept_name as team_name, e.fk_dept_no
            from tbl_employee e
            left join tbl_rank r on e.fk_rank_no = r.rank_no
            left join tbl_department dept on e.fk_dept_no = dept.dept_no
            left join tbl_department parent_dept on dept.parent_dept_no = parent_dept.dept_no
            where e.emp_status != '퇴직'
            <if test="qCategory != null and qValue != null and qValue != ''">
                <choose>
                    <when test="qCategory == 'emp_no'">
                        AND e.emp_no = #{qValue}
                    </when>
                    <when test="qCategory == 'name'">
                        AND e.emp_name like '%' || #{qValue} || '%'
                    </when>
                    <when test="qCategory == 'dept'">
                        AND nvl(parent_dept.dept_name, dept.dept_name) like '%' || #{qValue} || '%'
                    </when>
                    <when test="qCategory == 'team'">
                        AND dept.dept_name like '%' || #{qValue} || '%'
                    </when>
                </choose>
            </if>
            order by to_number(e.emp_no)
        ) a
        where rownum &lt;= #{offset} + #{limit}
    )
    where rn &gt; #{offset}
</select>

<select id="selectEmpCount" parameterType="map" resultType="int">
    select count(*) from tbl_employee e
    left join tbl_department dept on e.fk_dept_no = dept.dept_no
    left join tbl_department parent_dept on dept.parent_dept_no = parent_dept.dept_no
    where e.emp_status != '퇴직'
    <if test="qCategory != null and qValue != null and qValue != ''">
        <choose>
            <when test="qCategory == 'emp_no'">
                AND e.emp_no = #{qValue}
            </when>
            <when test="qCategory == 'name'">
                AND e.emp_name like '%' || #{qValue} || '%'
            </when>
            <when test="qCategory == 'dept'">
                AND nvl(parent_dept.dept_name, dept.dept_name) like '%' || #{qValue} || '%'
            </when>
            <when test="qCategory == 'team'">
                AND dept.dept_name like '%' || #{qValue} || '%'
            </when>
        </choose>
    </if>
</select>

<select id="selectLeaveCount" parameterType="HashMap">
	select count(*)
	from tbl_leave
	where FK_EMP_NO = #{emp_no}
</select>

<resultMap type="HashMap" id="leaveMap">
	<result property="leave_no"            column="leave_no" 			javaType="String"/>
	<result property="fk_emp_no"           column="fk_emp_no" 			javaType="String"/>
	<result property="fk_leave_type_no"    column="fk_leave_type_no" 	javaType="String"/>
	<result property="start_date"          column="start_date" 			javaType="String"/>
	<result property="end_date"            column="end_date" 			javaType="String"/>
	<result property="used_days"           column="used_days" 			javaType="Integer"/>
	<result property="leave_remark"        column="leave_remark" 		javaType="String"/>
</resultMap>


<select id="getEmpLeavelist" parameterType="HashMap" resultMap="leaveMap">
	SELECT leave_no,fk_emp_no,fk_leave_type_no,start_date,end_date,used_days,leave_remark
    FROM TBL_LEAVE
    WHERE FK_EMP_NO = #{emp_no}
    ORDER BY START_DATE DESC, LEAVE_NO DESC
    OFFSET #{offset} ROWS FETCH NEXT 3 ROWS ONLY
</select>

<select id="getUsed_days" parameterType="String">
	select used_days
	from tbl_leave
	where fk_emp_no = #{emp_no} and fk_leave_type_no = '1'
</select>
	
</mapper>
